Приоритет логических операций:

! (логическое "НЕ")
&& (логическое "И")
|| (логическое "ИЛИ")

Чтобы изменить порядок выполнения операций, можно использовать скобки.

Оператор исключающее ИЛИ (XOR) в Java — это логическая операция, которая возвращает true, если два операнда различны, и возвращает false, если оба операнда одинаковы. Он обозначается символом ^ и относится к разряду побитовых и логических операций.

Принцип работы исключающего ИЛИ (XOR):
Если один из операндов равен true, а другой — false, результат будет true.
Если оба операнда равны (оба true или оба false), результат будет false.

Пример использования XOR с логическими значениями:

public class XORExample {
    public static void main(String[] args) {
        boolean a = true;
        boolean b = false;
        
        // Исключающее ИЛИ (XOR)
        boolean result = a ^ b; // true ^ false -> true
        System.out.println("Result of true ^ false: " + result); // Вывод: true

        boolean result2 = a ^ true; // true ^ true -> false
        System.out.println("Result of true ^ true: " + result2); // Вывод: false
    }
}

Поиск уникального элемента: XOR используется для поиска уникального элемента в массиве, где каждый элемент повторяется дважды, кроме одного.

public class FindUnique {
    public static void main(String[] args) {
        int[] arr = {2, 3, 5, 4, 5, 3, 4};
        int unique = 0;
        
        for (int num : arr) {
            unique ^= num; // Суммируем элементы с помощью XOR
        }

        System.out.println("The unique element is: " + unique); // Вывод: 2
    }
}

Побитовые операции в Java работают на уровне отдельных битов чисел. Они позволяют выполнять операции над бинарными представлениями целых чисел. Эти операции применяются к каждому биту числа и могут быть полезны для оптимизации или специфических задач, например, работы с флагами, шифрования или сжатия данных.

Основные побитовые операторы:
Побитовое И (&):
Возвращает 1, если оба соответствующих бита равны 1, иначе — 0.
int a = 5; // 0101
int b = 3; // 0011
int result = a & b; // 0001 (результат: 1)

Побитовое ИЛИ (|):
Возвращает 1, если хотя бы один из соответствующих битов равен 1.
int a = 5; // 0101
int b = 3; // 0011
int result = a | b; // 0111 (результат: 7)

Исключающее ИЛИ (XOR, ^):
Возвращает 1, если биты различны (один равен 1, другой — 0), иначе — 0.
int a = 5; // 0101
int b = 3; // 0011
int result = a ^ b; // 0110 (результат: 6)

Отрицание (НЕ, ~):
Инвертирует каждый бит числа: 1 становится 0, и наоборот.
int a = 5; // 0101
int result = ~a; // 1010 (результат: -6, т.к. Java использует знаковое представление)

Сдвиг влево (<<):
Сдвигает все биты числа влево на указанное количество позиций. Освободившиеся биты заполняются нулями.
int a = 5; // 0101
int result = a << 1; // 1010 (результат: 10)

Сдвиг вправо (>>):
Сдвигает биты вправо, заполняя старшие биты знаком числа (для отрицательных чисел — 1, для положительных — 0).
int a = 5; // 0101
int result = a >> 1; // 0010 (результат: 2)

Беззнаковый сдвиг вправо (>>>):
Сдвигает биты вправо, заполняя старшие биты нулями, независимо от знака числа.
int a = -5;
int result = a >>> 1; // Результат: очень большое положительное число

Применение побитовых операций:
Работа с флагами: Можно эффективно управлять состояниями с помощью битов.
Шифрование и дешифрование: Некоторые шифры используют XOR для операций.
Оптимизация вычислений: Сдвиги используются для быстрого умножения или деления на 2.
    
Побитовые операции позволяют работать с битами напрямую, что делает их мощным инструментом для специфических задач.
