Инкапсуляция — это механизм скрытия данных и предоставления к ним доступа только через публичные методы. Поля класса обычно делаются private, а для доступа к ним создаются геттеры и сеттеры.
Сокрытие реализации: Внешний мир (другие объекты и классы) не знает и не может напрямую влиять на внутреннюю реализацию класса. Например, внутренние данные могут быть изменены, а внешние пользователи даже не заметят этого, если интерфейс (методы доступа) остаётся неизменным.

Управление доступом: С помощью геттеров и сеттеров можно контролировать доступ к полям, например, добавляя логику проверки данных (валидацию) перед изменением значений.
public void setBalance(double balance) {
    if (balance >= 0) {
        this.balance = balance;
    } else {
        System.out.println("Баланс не может быть отрицательным");
    }
}
Повышение безопасности данных: Инкапсуляция предотвращает случайное или преднамеренное изменение данных из других частей программы. Это делает код более надёжным и безопасным, так как поля могут быть изменены только через методы класса, которые можно снабдить проверками.
Повышение гибкости и поддерживаемости: Инкапсуляция позволяет изменять реализацию внутренней логики класса без необходимости изменять код, который использует этот класс. Например, можно изменить внутреннее хранилище данных, не затрагивая другие классы, если методы доступа остаются прежними.
Модульность: Инкапсуляция способствует созданию модульного кода. Каждый класс выполняет свои задачи, и их взаимодействие происходит через определённые интерфейсы (методы), что упрощает тестирование, сопровождение и доработку кода.


Полиморфизм позволяет объектам разных классов обрабатывать одинаковые вызовы методов по-разному. В Java полиморфизм проявляется в двух формах:
Переопределение метода (Override) — когда подкласс предоставляет свою реализацию метода, который был объявлен в родительском классе.
Перегрузка метода (Overload) — когда в одном классе несколько методов с одинаковым именем, но с разными параметрами.
                   
Абстракция позволяет скрывать сложные детали реализации и предоставлять только интерфейс для взаимодействия. Это можно реализовать с помощью абстрактных классов и интерфейсов.
Абстрактный класс — это класс, который не может быть инстанцирован, а только служит базой для других классов. В нем могут быть абстрактные методы (без реализации).
Интерфейс — это контракт, который определяет методы, которые должны быть реализованы классом
